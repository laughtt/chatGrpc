syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "ToDo service";
		version: "1.0";
		contact: {
			name: "go-grpc-p";
			url: "https://github.com/laughtt/chatGrpc";
			email: "jcarpioherrera@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

message ToDo {
    int64 id = 1;

    string title = 2;
    //descripcion del todo task
    string description = 3;
    //Tiempo y fecha para recordar al todo task
    google.protobuf.Timestamp reminder = 4;
}

message CreateRequest{
    // version del api

    string api = 1;

    //Identidad del todo
    ToDo toDo = 2;
}

 message CreateResponse{
     // version del api
     string api = 1;

     //id del proceso
     int64 id = 2;
 }

 message ReadRequest{
     string api = 1;

     int64 id = 2;
 }

 message ReadResponse{
     string api =1;

     ToDo toDo = 2;
 }
 message UpdateRequest{
     string api = 1;
 
     ToDo toDo = 2;
 }
 
 message UpdateResponse{
     string api = 1;
 
     // Es 1 si el update es exitoso
     int64 updated = 2;
 }
 
 // Data para borar el delete task
 message DeleteRequest{
     string api = 1;
 
     // Identificador del todo task para borrar
     int64 id = 2;
 }
 
 message DeleteResponse{
     string api = 1;
 
     // Contiene la cantidad de filas borradas
     // Es igual a 1 si funciona
     int64 deleted = 2;
 }
 
 // Request data to read all todo task
 message ReadAllRequest{
     // API versioning: it is my best practice to specify version explicitly
     string api = 1;
 }
 
 // Contains list of all todo tasks
 message ReadAllResponse{
     string api = 1;
 
     // Lista de todos los task
     repeated ToDo toDos = 2;
 }
 
 // Servicios
 service ToDoService {
     // Crea todo
     rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/v1/todo"
            body: "*"
        };
     }
 
     // Lee todo
     rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/todo/{id}"
        };
     }
 
     // upgrade todo
     rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/todo/{toDo.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/todo/{toDo.id}"
                body: "*"
            }
        };
     }
 
     // Borra todo
     rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/todo/{id}"
        };
     }
 
     // Lee todo
     rpc ReadAll(ReadAllRequest) returns (ReadAllResponse){
        option (google.api.http) = {
            get :"/v1/todo"
        };
     }
 }
